import numpy as np

#5 warump
code1 = [
[833,808,806,807,811,802,808,808,817,793,803,795,797,798,790,802,803,817,804,791,796,795,795,796,799],
[737,708,705,751,709,706,714,710,708,711,717,713,711,709,717,705,701,703,702,706,706,707,703,704,704],
[830,801,808,805,834,832,810,794,796,805,808,795,805,795,813,825,802,797,800,808,807,805,820,804,799],
[790,806,805,822,800,800,795,783,787,781,778,777,777,786,791,785,780,787,772,782,783,780,779,781,778],
[803,795,796,807,790,791,798,789,788,782,797,800,797,790,786,790,788,784,791,782,783,786,785,788,794],
[806,804,807,800,795,800,813,805,798,796,797,804,793,789,797,801,804,797,807,799,806,806,802,805,788],
[800,799,787,788,786,789,812,801,794,790,788,786,782,780,780,788,779,771,777,780,784,778,772,789,788],
[783,763,776,776,771,768,772,779,768,771,764,757,764,770,758,763,763,778,757,764,763,772,767,772,786],
[814,830,820,812,823,831,817,837,818,812,810,807,808,809,810,807,813,811,821,811,813,802,816,821,812],
[826,783,787,797,789,790,788,791,787,782,786,779,786,789,787,796,783,784,782,783,775,780,788,782,779],
]
#2 warmup
code2 = [
[471,439,442,464,442,449,477,445,450,479,442,440,478,454,436,440,457,446,437,469,445,441,461,443,439,452,443,465],
[467,449,442,463,448,443,476,450,444,481,441,452,474,448,439,437,459,445,440,464,447,443,456,442,441,447,444,474],
[466,449,437,470,445,451,472,449,445,476,442,450,480,443,447,438,458,447,437,462,453,439,456,449,436,454,446,476],
[467,447,441,461,451,446,474,443,442,467,450,438,477,447,441,442,455,445,436,459,443,438,453,443,441,448,443,464],
[465,439,451,458,441,442,469,447,450,470,439,445,475,445,446,440,462,445,447,458,449,449,456,442,446,456,437,472],
[465,449,445,472,447,444,465,441,445,468,447,444,486,452,444,446,461,443,448,463,444,450,455,444,446,448,446,482],
[462,443,438,468,445,448,473,442,449,473,445,445,475,444,440,440,455,445,435,463,447,437,459,444,438,451,445,462],
[463,445,456,463,449,444,461,450,451,474,443,446,473,449,439,451,453,434,447,453,439,447,451,435,446,450,442,472],
[465,444,437,469,439,452,460,442,455,480,444,447,476,443,442,436,459,443,433,463,447,438,453,446,436,455,440,465],
[463,447,445,462,452,441,468,445,439,479,449,443,481,451,438,455,453,442,447,454,440,442,453,439,444,444,454,476],
]
#5 warmup
code3 = [
[789,771,752,767,759,759,757,762,769,765,764,750,763,772,757,752,748,760,752,750,747,751,758,755,747],
[783,773,753,758,760,804,767,751,757,762,755,753,773,763,754,754,750,752,749,745,749,753,752,746,766],
[770,761,746,748,758,765,755,753,754,753,744,746,752,751,748,749,754,755,749,746,748,752,746,744,746],
[787,759,748,750,747,760,749,750,749,749,747,747,745,752,746,749,746,751,748,750,750,752,750,750,751],
[765,756,751,749,746,755,750,752,749,753,748,749,744,749,745,748,745,748,746,746,744,747,754,747,747],
[777,762,756,756,754,760,755,768,746,752,743,742,749,754,749,748,751,759,745,745,749,760,745,742,744],
[770,755,746,746,750,753,745,748,747,756,748,756,754,748,742,746,746,752,742,746,748,751,757,745,746],
[784,752,749,748,749,755,749,749,748,749,745,745,748,754,748,748,748,750,749,755,746,746,746,746,746],
[767,758,753,745,748,751,756,754,747,757,757,749,747,751,751,754,748,749,745,742,744,755,752,748,744],
[843,847,841,835,837,844,839,844,833,843,839,833,846,837,834,833,837,844,834,835,833,839,837,831,833],
]

t1 = 0.999 #konstanta, rozdeleni


##################
#code1

rn = 25 #protoze 5 kol byl warmup
Y = code1 # 10 mereni po 30-5ti iteracich v jave
Y_jn_do_Y = sum(code1[5]) #suma casu 5. mereni
#Y_avg = list(map(sum,code1)) #prumer ze vsech 10ti mereni a z nich prumer
Y_avg = list(map(np.mean,code1)) #prumer ze vsech 10ti mereni a z nich prumer


#print(Y_avg)
#Y_avg = sum(Y_avg)/len(Y_avg)
Y_avg = np.mean(Y_avg)
#print(Y_avg)

necoplus  = Y_avg + t1*np.sqrt((1/(rn*(rn-1))) * (Y_jn_do_Y - Y_avg)**2)
necominus = Y_avg - t1*np.sqrt((1/(rn*(rn-1))) * (Y_jn_do_Y - Y_avg)**2)
#h = t1*sqrt((1/(rn(rn-1))) * (Y_jn_do_Y)**2)

print('necoplus: %d , necominus: %d' % (necoplus,necominus))
####################



##################
#code2

rn = 28 #protoze 2 kol byl warmup
Y = code2 # 10 mereni po 30ti iteracich v jave
Y_jn_do_Y = sum(code1[2]) #suma casu 2. mereni
#Y_avg = list(map(sum,code1)) #prumer ze vsech 10ti mereni a z nich prumer
Y_avg = list(map(np.mean,code1)) #prumer ze vsech 10ti mereni a z nich prumer


#print(Y_avg)
#Y_avg = sum(Y_avg)/len(Y_avg)
Y_avg = np.mean(Y_avg)
#print(Y_avg)

necoplus  = Y_avg + t1*np.sqrt((1/(rn*(rn-1))) * (Y_jn_do_Y - Y_avg)**2)
necominus = Y_avg - t1*np.sqrt((1/(rn*(rn-1))) * (Y_jn_do_Y - Y_avg)**2)
#h = t1*sqrt((1/(rn(rn-1))) * (Y_jn_do_Y)**2)

print('necoplus: %d , necominus: %d' % (necoplus,necominus))
####################




##################
#code3

rn = 25 #protoze 5 kol byl warmup
Y = code3 # 10 mereni po 30-5ti iteracich v jave
Y_jn_do_Y = sum(code1[5]) #suma casu 5. mereni
#Y_avg = list(map(sum,code1)) #prumer ze vsech 10ti mereni a z nich prumer
Y_avg = list(map(np.mean,code1)) #prumer ze vsech 10ti mereni a z nich prumer


#print(Y_avg)
#Y_avg = sum(Y_avg)/len(Y_avg)
Y_avg = np.mean(Y_avg)
#print(Y_avg)

necoplus  = Y_avg + t1*np.sqrt((1/(rn*(rn-1))) * (Y_jn_do_Y - Y_avg)**2)
necominus = Y_avg - t1*np.sqrt((1/(rn*(rn-1))) * (Y_jn_do_Y - Y_avg)**2)
#h = t1*sqrt((1/(rn(rn-1))) * (Y_jn_do_Y)**2)

print('necoplus: %d , necominus: %d' % (necoplus,necominus))
####################
