" vim-plug
" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire' " ae, ie
Plug 'kana/vim-textobj-fold' " az, iz
"Plug 'w0rp/ale'
"Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh'}
"Plug 'roxma/nvim-completion-manager'
Plug 'kana/vim-textobj-function' " af, if
Plug 'kana/vim-textobj-indent' " ai, ii
Plug 'kana/vim-textobj-line' " al, il
Plug 'glts/vim-textobj-comment' " ac, ic
Plug 'sgur/vim-textobj-parameter' " a, i,
Plug 'christoomey/vim-sort-motion'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/vim-auto-save'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdtree'
Plug 'thaerkh/vim-indentguides'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'vim-scripts/ZoomWin'
Plug 'chriskempson/base16-vim'

" Initialize plugin system
call plug#end()

" Base 16 scheme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
colorscheme base16-tomorrow

" Basics
set clipboard=unnamedplus                                               " system clipboard is default
set list                                                                " show whitespace chars
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·,eol:¬         " whitespace chars
set colorcolumn=100                                                     " line length hint
set number relativenumber                                               " numbering
set showcmd                                                             " show command in bottom bar
set cursorline                                                          " highlight current line 
set wildmenu                                                            " visual autocomplete for command menu
set lazyredraw                                                          " redraw only when we need to.
set showmatch                                                           " highlight matching [{()}]
set incsearch                                                           " search as characters are entered
set hlsearch                                                            " highlight matches
set foldenable                                                          " enable folding
set foldlevelstart=10                                                   " open most folds by default
set foldnestmax=10                                                      " 10 nested fold max
" set nu
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set expandtab
set scrolloff=10
syntax enable

set noswapfile
set autowriteall                                                        " make autosaving
set autoread
au FocusGained * :checktime                                             " autoreloading
let g:auto_save = 1                                                     " enable AutoSave on Vim startup
runtime macros/matchit.vim

" vim-commentary
autocmd FileType julia setlocal commentstring=#\ %s
autocmd FileType cpp setlocal commentstring=//\ %s

" window toggle zoom remap
" not working in nvim
" nnoremap <silent> <C-w>w :ZoomWin<CR>
nnoremap <silent> <C-w>w :tab split<CR>

" make
nnoremap <F5> :silent make! -B %<<CR>

" quickfix
map <C-j> :cn<CR>
map <C-k> :cp<CR>
map <C-h> :cfirst<CR>
map <C-l> :clast<CR>

" move vertically by visual line if there's a very long line that gets visually wrapped to two lines, j won't skip over the fake part of the visual line in favor of the next real line.
nnoremap k gk
nnoremap 0 g0
nnoremap ^ g^
nnoremap $ g$
nnoremap r gr
nnoremap R gR
nnoremap j gj
nnoremap k gk
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy, which is the default
noremap <space> :
map Y y$
" toggle gundo

" Lightline setup
set noshowmode
set laststatus=2

" tab shortcuts
nnoremap <C-t>n :tabnew<Space>
nnoremap <C-t>m :tabm<Space>
nnoremap <C-t>h :tabprev<CR>
nnoremap <C-t>H :tabfirst<CR>
nnoremap <C-t>l :tabnext<CR>
nnoremap <C-t>L :tablast<CR>

"" ale julia
"" LanguageServer must be installed in julia
"let g:default_julia_version = '0.6'
"
"" language server
"let g:LanguageClient_autoStart = 1
"let g:LanguageClient_serverCommands = {
"\   'julia': ['julia6', '--startup-file=no', '--history-file=no', '-e', '
"\       using LanguageServer;
"\       server = LanguageServer.LanguageServerInstance(STDIN, STDOUT, false);
"\       server.runlinter = true;
"\       run(server);
"\   '],
"\ }
"
"nnoremap <F5> :call LanguageClient_contextMenu()<CR>
"nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
"nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
"nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

"fzf"
nnoremap <C-p> :Files<CR>
nnoremap <C-Space>p :Files!<CR>
nnoremap <C-s> :Ag<CR>
nnoremap <C-Space>s :Ag!<CR>

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" NERD Tree
map <C-n> :NERDTreeToggle<CR>
" map <C-w>w :NERDTreeMapToggleZoom
let g:NERDTreeMapToggleZoom = '<C-w>w'
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
" open current file
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
" close on open
let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
" automatically close if NERDtree is the only remaining window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" start with vim if no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" prettier UI
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

"" call NERDTreeHighlightFile('txt', 'green', 'none', 'green', '#151515')
"" call NERDTreeHighlightFile('jl', 'yellow', 'none', 'yellow', '#151515')
"" call NERDTreeHighlightFile('sh', 'blue', 'none', '#3366FF', '#151515')
"" call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
"" call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
"" call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
"" call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
"" call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
"" call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
"" call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
"" call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
"" call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
"" call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

